def remote = [:]
agentName = 'macos'
urlHorusecScript = 'https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh'

pipeline {
	agent { label agentName }
	stages {
        stage('Build') {
            steps {
                sh getCommandBuildAndTests(false)
            }
        }
        stage('Lint') {
            steps {
                sh 'swiftlint'
            }
        }
        stage('Tests') {
            steps {
                sh getCommandBuildAndTests(true)
            }
        }
        stage('Horusec') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'macos', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        remote.name = "$user"
                        remote.host = getIp(agentName)
                        remote.user = "$user"
                        remote.password = "$pass"
                        remote.allowAnyHosts = true
                        remote.pty = true    
                    }
                    sshCommand remote: remote, command: "curl -fsSL ${urlHorusecScript} | bash -s latest" , sudo: true
                    sh 'horusec start -a aec4312b-37e8-4188-ae77-135d23dc208e -p="./" -e="true"'
                }
            }
        }
    }
}

def getCommandBuildAndTests(isTest) {
    def buildScheme = 'SampleUnitTesting'
    def test = ''
    if(isTest) {
        buildScheme = 'SampleUnitTestingXCTests'
        test = 'test'
    } 
    return "xcodebuild ${test} -project SampleUnitTesting.xcodeproj -scheme ${buildScheme} -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.3'"
}

def getIp(nodeName) {
    def node = Jenkins.instance.slaves.find{it.name.trim()==nodeName.trim()}
    if(node) {
        def ip = InetAddress.getByName(node.computer.hostName).getHostAddress()
        return ip
    } else {
        println "node not found in jenkins instance"
    }
}